- const { envId, option ,pageview } = theme.comment.waline
- const { lazyload, count } = theme.comment

script.
    async function initComment() {
        const isLazyLoad = !!{lazyload};
        let walineInitFunction = window.walineFn || null;

        async function initWaline(Fn) {
            const walineOptions = {
                el: '#comment',
                serverURL: '!{envId}',
                pageview: !isLazyLoad,
                dark: 'html[data-theme="dark"]',
                path: window.location.pathname,
                comment: !isLazyLoad,
                ...!{JSON.stringify(option)}
            };
            const walineInstance = Fn(walineOptions);

            utils.addGlobalFn('pjax', () => walineInstance.destroy(), 'destroyWaline');

            if (GLOBAL_CONFIG.lightbox) {
                utils.lightbox(document.querySelectorAll('#comment .wl-content img:not(.wl-emoji)'));
            }

            sco.owoBig();

            GLOBAL_CONFIG.comment.commentBarrage && PAGE_CONFIG.comment && initializeCommentBarrage(await fetchComments())
        }

        if (isLazyLoad) {
            utils.loadComment(document.getElementById('comment'), initWaline(walineInitFunction));
        } else {
            await initWaline(walineInitFunction);
        }

        async function fetchComments() {
            const url = new URL('#{envId}/api/comment');
            const params = {
                path: window.location.pathname,
                sortBy: 'insertedAt_asc'
            };

            for (const [key, value] of Object.entries(params)) {
                url.searchParams.append(key, value);
            }

            try {
                const response = await fetch(url, {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json"
                    },
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                return (data.data).map(item => Object.assign({
                    nick: item.nick,
                    mailId: item.avatar,
                    content: item.comment,
                    id: item.objectId
                }))
            } catch (error) {
                console.error("An error occurred while fetching comments: ", error);
            }
        }
    }