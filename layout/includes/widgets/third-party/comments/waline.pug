- const { envId, option ,pageview } = theme.comment.waline
- const { lazyload, count, commentBarrage } = theme.comment

script.
    !function () {
        let walineInitFunction = window.walineFn || null

        function initWaline(initFn) {
            const walineOptions = {
                el: '#waline-wrap',
                serverURL: '!{envId}',
                pageview: !{pageview},
                dark: 'html[data-theme="dark"]',
                path: window.location.pathname,
                comment: !{count},
                ...!{JSON.stringify(option)}
            }
            const walineInstance = initFn(walineOptions)
            utils.addGlobalFn('pjax', () => walineInstance.destroy(), 'destroyWaline')
            GLOBAL_CONFIG.lightbox && utils.lightbox(document.querySelectorAll('#comment .wl-content img:not(.wl-emoji)'))
            sco.owoBig()
        }

        async function loadWaline() {
            if (walineInitFunction) initWaline(walineInitFunction)
            else {
                await utils.getCSS('!{url_for(theme.cdn.waline_css)}')
                const {init} = await import('!{url_for(theme.cdn.waline_js)}')
                walineInitFunction = init || Waline.init
                initWaline(walineInitFunction)
                window.walineFn = walineInitFunction
            }
            if (!{commentBarrage}) barrageWaline()
        }

        if ('!{use[0]}' === 'Valine' || !{lazyload}) {
            if (!{lazyload}) utils.loadComment(document.getElementById('waline-wrap'), loadWaline)
            else loadWaline()
        } else window.loadTwoComment = loadWaline
    }()

if commentBarrage
    script.
        const barrageWaline = async () => {
            const url = new URL('!{envId}/api/comment')
            const params = {path: window.location.pathname, sortBy: 'insertedAt_asc'}
            Object.entries(params).forEach(([key, value]) => url.searchParams.append(key, value))
            const response = await fetch(url, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json"
                },
            }).then(async res => {
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`)
                const data = await response.json();
                await utils.getScript('!{url_for(theme.cdn.commentBarrage)}')
                initializeCommentBarrage(data.data.map(item => ({
                    nick: item.nick,
                    mailId: item.avatar,
                    content: item.comment,
                    id: item.objectId
                })))
            }).catch(error => console.error("An error occurred while fetching comments: ", error))
        }